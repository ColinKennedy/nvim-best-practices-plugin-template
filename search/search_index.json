{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This website was generated automatically using a fancy Lua -&gt; Markdown -&gt; HTML translator. See nvim-best-practices-plugin-template for details!</p>"},{"location":"modules/lualine.components.plugin_template/","title":"global lualine.components.plugin_template","text":""},{"location":"modules/plugin_template._commands.arbitrary_thing.parser/","title":"global plugin_template._commands.arbitrary_thing.parser","text":""},{"location":"modules/plugin_template._commands.arbitrary_thing.parser/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.arbitrary_thing.parser/#mmake_parser","title":"M.make_parser","text":"<pre><code>function M.make_parser() -&gt;  mega.cmdparse.ParameterParser\n</code></pre> <p>@return  - The main parser for the <code>:PluginTemplate arbitrary-thing</code> command.</p>"},{"location":"modules/plugin_template._commands.arbitrary_thing.runner/","title":"global plugin_template._commands.arbitrary_thing.runner","text":""},{"location":"modules/plugin_template._commands.arbitrary_thing.runner/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.arbitrary_thing.runner/#mrun","title":"M.run","text":"<pre><code>function M.run(names: string[]?) -&gt;  nil\n</code></pre> <p>@param <code>names</code> - Some text to print out. e.g. <code>{\"a\", \"b\", \"c\"}</code>.</p> <p>Print the <code>names</code>.</p>"},{"location":"modules/plugin_template._commands.copy_logs.parser/","title":"global plugin_template._commands.copy_logs.parser","text":""},{"location":"modules/plugin_template._commands.copy_logs.parser/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.copy_logs.parser/#mmake_parser","title":"M.make_parser","text":"<pre><code>function M.make_parser() -&gt;  mega.cmdparse.ParameterParser\n</code></pre> <p>@return  - The main parser for the <code>:PluginTemplate copy-logs</code> command.</p>"},{"location":"modules/plugin_template._commands.copy_logs.runner/","title":"global plugin_template._commands.copy_logs.runner","text":""},{"location":"modules/plugin_template._commands.copy_logs.runner/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.copy_logs.runner/#mrun","title":"M.run","text":"<pre><code>function M.run(path: string?) -&gt;  nil\n</code></pre> <p>Copy the log data from the given <code>path</code> to the user's clipboard.</p>"},{"location":"modules/plugin_template._commands.goodnight_moon.count_sheep/","title":"global plugin_template._commands.goodnight_moon.count_sheep","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.count_sheep/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.count_sheep/#mrun","title":"M.run","text":"<pre><code>function M.run(count: number) -&gt;  nil\n</code></pre> <p>@param <code>count</code> - Prints 1 sheep per <code>count</code>. A value that is 1-or-greater.</p> <p>Count a sheep for each <code>count</code>.</p>"},{"location":"modules/plugin_template._commands.goodnight_moon.parser/","title":"global plugin_template._commands.goodnight_moon.parser","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.parser/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.parser/#mmake_parser","title":"M.make_parser","text":"<pre><code>function M.make_parser() -&gt;  mega.cmdparse.ParameterParser\n</code></pre> <p>@return  - The main parser for the <code>:PluginTemplate goodnight-moon</code> command.</p>"},{"location":"modules/plugin_template._commands.goodnight_moon.read/","title":"global plugin_template._commands.goodnight_moon.read","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.read/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.read/#mrun","title":"M.run","text":"<pre><code>function M.run(book: string) -&gt;  nil\n</code></pre> <p>@param <code>book</code> - The name of the book.</p> <p>Print the name of the book.</p>"},{"location":"modules/plugin_template._commands.goodnight_moon.sleep/","title":"global plugin_template._commands.goodnight_moon.sleep","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.sleep/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.goodnight_moon.sleep/#mrun","title":"M.run","text":"<pre><code>function M.run(count: number?) -&gt;  nil\n</code></pre> <p>@param <code>count</code> - Prints 1 Zzz per <code>count</code>. A value that is 1-or-greater.</p> <p>Print Zzz each <code>count</code>.</p>"},{"location":"modules/plugin_template._commands.hello_world.parser/","title":"global plugin_template._commands.hello_world.parser","text":""},{"location":"modules/plugin_template._commands.hello_world.parser/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.hello_world.parser/#mmake_parser","title":"M.make_parser","text":"<pre><code>function M.make_parser() -&gt;  mega.cmdparse.ParameterParser\n</code></pre> <p>@return  - The main parser for the <code>:PluginTemplate hello-world</code> command.</p>"},{"location":"modules/plugin_template._commands.hello_world.say.constant/","title":"global plugin_template._commands.hello_world.say.constant","text":""},{"location":"modules/plugin_template._commands.hello_world.say.constant/#fields","title":"fields","text":""},{"location":"modules/plugin_template._commands.hello_world.say.constant/#msubcommand","title":"M.Subcommand","text":"<pre><code>M.Subcommand: table\n</code></pre>"},{"location":"modules/plugin_template._commands.hello_world.say.constant/#mkeyword","title":"M.Keyword","text":"<pre><code>M.Keyword: table\n</code></pre>"},{"location":"modules/plugin_template._commands.hello_world.say.runner/","title":"global plugin_template._commands.hello_world.say.runner","text":""},{"location":"modules/plugin_template._commands.hello_world.say.runner/#methods","title":"methods","text":""},{"location":"modules/plugin_template._commands.hello_world.say.runner/#mrun_say_phrase","title":"M.run_say_phrase","text":"<pre><code>function M.run_say_phrase(\n  phrase: string[],\n  repeat_: number?,\n  style: string?\n) -&gt;  nil\n</code></pre> <p>Print <code>phrase</code> according to the other options.</p>"},{"location":"modules/plugin_template._commands.hello_world.say.runner/#mrun_say_word","title":"M.run_say_word","text":"<pre><code>function M.run_say_word(\n  word: string,\n  repeat_: number?,\n  style: string?\n) -&gt;  nil\n</code></pre> <p>Print <code>phrase</code> according to the other options.</p>"},{"location":"modules/plugin_template._core.configuration/","title":"global plugin_template._core.configuration","text":""},{"location":"modules/plugin_template._core.configuration/#methods","title":"methods","text":""},{"location":"modules/plugin_template._core.configuration/#minitialize_data_if_needed","title":"M.initialize_data_if_needed","text":"<pre><code>function M.initialize_data_if_needed() -&gt;  nil\n</code></pre> <p>Setup <code>plugin_template</code> for the first time, if needed.</p>"},{"location":"modules/plugin_template._core.configuration/#mresolve_data","title":"M.resolve_data","text":"<pre><code>function M.resolve_data(data: plugin_template.Configuration?) -&gt;  plugin_template.Configuration {\n    commands = plugin_template.ConfigurationCommands?,\n    logging = plugin_template.LoggingConfiguration?,\n    tools = plugin_template.ConfigurationTools?,\n}\n</code></pre> <p>@param <code>data</code> - All extra customizations for this plugin.</p> <p>@return  - The configuration with 100% filled out values.</p> <p>Merge <code>data</code> with the user's current configuration.</p>"},{"location":"modules/plugin_template._core.configuration/#fields","title":"fields","text":""},{"location":"modules/plugin_template._core.configuration/#mdata","title":"M.DATA","text":"<pre><code>M.DATA : plugin_template.Configuration {\n    commands: plugin_template.ConfigurationCommands?,\n    logging: plugin_template.LoggingConfiguration?,\n    tools: plugin_template.ConfigurationTools?,\n}\n</code></pre>"},{"location":"modules/plugin_template._core.tabler/","title":"global plugin_template._core.tabler","text":""},{"location":"modules/plugin_template._core.tabler/#methods","title":"methods","text":""},{"location":"modules/plugin_template._core.tabler/#mget_slice","title":"M.get_slice","text":"<pre><code>function M.get_slice(\n  table_: table&lt;any,any&gt;,\n  first: number?,\n  last: number?,\n  step: number?\n) -&gt; The table&lt;any,any&gt;\n</code></pre> <p>@return <code>The</code> - subset of <code>table_</code>.</p> <p>Get a sub-section copy of <code>table_</code> as a new table.</p>"},{"location":"modules/plugin_template._core.tabler/#mget_value","title":"M.get_value","text":"<pre><code>function M.get_value(\n  data: any,\n  items: string[]\n) -&gt;  any\n</code></pre> <p>@param <code>data</code> - Some nested data to query. e.g. <code>{a={b={c=true}}}</code>.</p> <p>@param <code>items</code> - Some attributes to query. e.g. <code>{\"a\", \"b\", \"c\"}</code>.</p> <p>@return  - The found value, if any.</p> <p>Access the attribute(s) within <code>data</code> from <code>items</code>.</p>"},{"location":"modules/plugin_template._core.tabler/#mchain","title":"M.chain","text":"<pre><code>function M.chain(...: table&lt;any,any&gt;[]) -&gt;  any\n</code></pre> <p>@param <code>...</code> - All of the tables to expand</p> <p>@return  - Every element of each table, in order.</p> <p>Iterate over all of the given arrays.</p>"},{"location":"modules/plugin_template._core.tabler/#mclear","title":"M.clear","text":"<pre><code>function M.clear(data: table&lt;any,any&gt;) -&gt;  nil\n</code></pre> <p>@param <code>data</code> - A dictionary or array to clear.</p> <p>Delete the contents of <code>data</code>.</p>"},{"location":"modules/plugin_template._core.tabler/#mextend","title":"M.extend","text":"<pre><code>function M.extend(\n  table_: any[],\n  items: any\n) -&gt;  nil\n</code></pre> <p>@param <code>table_</code> - Any values to add.</p> <p>@param <code>items</code> - The values to add.</p> <p>Append all of <code>items</code> to <code>table_</code>.</p>"},{"location":"modules/plugin_template._core.tabler/#mreverse_array","title":"M.reverse_array","text":"<pre><code>function M.reverse_array(array: table&lt;any,any&gt;) -&gt;  table&lt;any,any&gt;\n</code></pre> <p>@param <code>array</code> - Some (non-dictionary) items e.g. <code>{\"a\", \"b\", \"c\"}</code>.</p> <p>@return  - The reversed items e.g. <code>{\"c\", \"b\", \"a\"}</code>.</p> <p>Create a copy of <code>array</code> with its items in reverse order.</p>"},{"location":"modules/plugin_template._core.texter/","title":"global plugin_template._core.texter","text":""},{"location":"modules/plugin_template._core.texter/#methods","title":"methods","text":""},{"location":"modules/plugin_template._core.texter/#mis_alphanumeric","title":"M.is_alphanumeric","text":"<pre><code>function M.is_alphanumeric(character: string) -&gt;  boolean\n</code></pre> <p>@param <code>character</code> - Some single-value to check.</p> <p>@return  - If it's alpha return <code>true</code>.</p> <p>Check if <code>character</code> is a standard A-Z 0-9ish character.</p>"},{"location":"modules/plugin_template._core.texter/#mis_unicode","title":"M.is_unicode","text":"<pre><code>function M.is_unicode(character: string) -&gt;  boolean\n</code></pre> <p>@param <code>character</code> - Some single-value to check.</p> <p>@return  - If found return <code>true</code>.</p> <p>Check if <code>character</code> is \"regular\" text but not alphanumeric.</p> <p>Examples would be Asian characters, Arabic, emojis, etc.</p>"},{"location":"modules/plugin_template._core.texter/#mis_string_list","title":"M.is_string_list","text":"<pre><code>function M.is_string_list(items: any) -&gt;  boolean\n</code></pre> <p>@param <code>items</code> - An array to check.</p> <p>@return  - If found, return <code>true</code>.</p> <p>Check if <code>items</code> is a flat array/list of string values.</p>"},{"location":"modules/plugin_template._core.texter/#mis_whitespace","title":"M.is_whitespace","text":"<pre><code>function M.is_whitespace(character: string) -&gt;  boolean\n</code></pre> <p>@param <code>character</code> - Basically <code>\" \"</code>, <code>\\n</code>, <code>\\t</code>.</p> <p>@return  - If it's any whitespace, return <code>true</code>.</p> <p>Check if <code>character</code> is a space, tab, or newline.</p>"},{"location":"modules/plugin_template._core.texter/#mget_array_startswith","title":"M.get_array_startswith","text":"<pre><code>function M.get_array_startswith(\n  values: string[],\n  prefix: string\n) -&gt;  string[]\n</code></pre> <p>@param <code>values</code> - All values to check. e.g. <code>{\"foo\", \"bar\"}</code>.</p> <p>@param <code>prefix</code> - The prefix text to search for.</p> <p>@return  - All found values, if any.</p> <p>Check all elements in <code>values</code> for <code>prefix</code> text.</p>"},{"location":"modules/plugin_template._core.texter/#mindent","title":"M.indent","text":"<pre><code>function M.indent(text: string) -&gt;  string\n</code></pre> <p>@param <code>text</code> - Some phrase to indent one level. e.g. <code>\"foo\"</code>.</p> <p>@return  - The indented text, <code>\"    foo\"</code>.</p> <p>Add indentation to `text.</p>"},{"location":"modules/plugin_template._core.texter/#mlstrip","title":"M.lstrip","text":"<pre><code>function M.lstrip(text: string) -&gt;  string\n</code></pre> <p>@param <code>text</code> - Some text e.g. <code>\" -- \"</code>.</p> <p>@return  - The removed text e.g. <code>\"-- \"</code>.</p> <p>Remove leading (left) whitespace <code>text</code>, if there is any.</p>"},{"location":"modules/plugin_template._core.texter/#mstartswith","title":"M.startswith","text":"<pre><code>function M.startswith(\n  text: string,\n  start: string\n) -&gt;  boolean\n</code></pre> <p>@param <code>text</code> - The full character / word / phrase. e.g. <code>\"foot\"</code>.</p> <p>@param <code>start</code> - The first letter(s) to check for. e.g.g <code>\"foo\"</code>.</p> <p>@return  - If found, return <code>true</code>.</p> <p>Check if <code>text</code> starts with <code>start</code> string.</p>"},{"location":"modules/plugin_template.health/","title":"global plugin_template.health","text":""},{"location":"modules/plugin_template.health/#methods","title":"methods","text":""},{"location":"modules/plugin_template.health/#mget_issues","title":"M.get_issues","text":"<pre><code>function M.get_issues(data: plugin_template.Configuration?) -&gt;  string[]\n</code></pre> <p>@param <code>data</code> - All extra customizations for this plugin.</p> <p>@return  - All found issues, if any.</p> <p>Check <code>data</code> for problems and return each of them.</p>"},{"location":"modules/plugin_template.health/#mcheck","title":"M.check","text":"<pre><code>function M.check(data: plugin_template.Configuration?) -&gt;  nil\n</code></pre> <p>@param <code>data</code> - All extra customizations for this plugin.</p> <p>Make sure <code>data</code> will work for <code>plugin_template</code>.</p>"},{"location":"modules/plugin_template/","title":"global plugin_template","text":""},{"location":"modules/plugin_template/#methods","title":"methods","text":""},{"location":"modules/plugin_template/#mrun_arbitrary_thing","title":"M.run_arbitrary_thing","text":"<pre><code>function M.run_arbitrary_thing(names: string[]?) -&gt;  nil\n</code></pre> <p>@param <code>names</code> - Some text to print out. e.g. <code>{\"a\", \"b\", \"c\"}</code>.</p> <p>Print the <code>names</code>.</p>"},{"location":"modules/plugin_template/#mrun_copy_logs","title":"M.run_copy_logs","text":"<pre><code>function M.run_copy_logs(path: string?) -&gt;  nil\n</code></pre> <p>Copy the log data from the given <code>path</code> to the user's clipboard.</p>"},{"location":"modules/plugin_template/#mrun_hello_world_say_phrase","title":"M.run_hello_world_say_phrase","text":"<pre><code>function M.run_hello_world_say_phrase(\n  phrase: string[],\n  repeat_: number?,\n  style: string?\n) -&gt;  nil\n</code></pre> <p>Print <code>phrase</code> according to the other options.</p>"},{"location":"modules/plugin_template/#mrun_hello_world_say_word","title":"M.run_hello_world_say_word","text":"<pre><code>function M.run_hello_world_say_word(\n  word: string,\n  repeat_: number?,\n  style: string?\n) -&gt;  nil\n</code></pre> <p>Print <code>phrase</code> according to the other options.</p>"},{"location":"modules/plugin_template/#mrun_goodnight_moon_count_sheep","title":"M.run_goodnight_moon_count_sheep","text":"<pre><code>function M.run_goodnight_moon_count_sheep(count: number) -&gt;  nil\n</code></pre> <p>@param <code>count</code> - Prints 1 sheep per <code>count</code>. A value that is 1-or-greater.</p> <p>Count a sheep for each <code>count</code>.</p>"},{"location":"modules/plugin_template/#mrun_goodnight_moon_read","title":"M.run_goodnight_moon_read","text":"<pre><code>function M.run_goodnight_moon_read(book: string) -&gt;  nil\n</code></pre> <p>@param <code>book</code> - The name of the book.</p> <p>Print the name of the book.</p>"},{"location":"modules/plugin_template/#mrun_goodnight_moon_sleep","title":"M.run_goodnight_moon_sleep","text":"<pre><code>function M.run_goodnight_moon_sleep(count: number?) -&gt;  nil\n</code></pre> <p>@param <code>count</code> - Prints 1 Zzz per <code>count</code>. A value that is 1-or-greater.</p> <p>Print Zzz each <code>count</code>.</p>"},{"location":"modules/telescope._extensions.plugin_template/","title":"global telescope._extensions.plugin_template","text":""},{"location":"modules/telescope._extensions.plugin_template.runner/","title":"global telescope._extensions.plugin_template.runner","text":""},{"location":"modules/telescope._extensions.plugin_template.runner/#methods","title":"methods","text":""},{"location":"modules/telescope._extensions.plugin_template.runner/#mget_goodnight_moon_picker","title":"M.get_goodnight_moon_picker","text":"<pre><code>function M.get_goodnight_moon_picker(options: telescope.CommandOptions) -&gt;  unknown\n</code></pre> <p>@param <code>options</code> - The Telescope UI / layout options.</p> <p>Run the <code>:Telescope plugin_template goodnight-moon</code> command.</p>"},{"location":"modules/telescope._extensions.plugin_template.runner/#mget_hello_world_picker","title":"M.get_hello_world_picker","text":"<pre><code>function M.get_hello_world_picker(options: telescope.CommandOptions) -&gt;  unknown\n</code></pre> <p>@param <code>options</code> - The Telescope UI / layout options.</p> <p>Run the <code>:Telescope plugin_template hello-world</code> command.</p>"},{"location":"modules/telescope._extensions.plugin_template.runner/#mget_selection","title":"M.get_selection","text":"<pre><code>function M.get_selection(buffer: number) -&gt;  string[]\n</code></pre> <p>@param <code>buffer</code> - A 0-or-more value of some Vim buffer.</p> <p>@return  - The found selection(s) if any.</p> <p>Gather the selected Telescope entries.</p> <p>If the user made  selections, get each of those. If they pressed  without any  assignments then just get the line that they called  on."},{"location":"types/lualine.ColorHex/","title":"class ColorHex","text":"<ul> <li>namespace: lualine</li> </ul>"},{"location":"types/lualine.ColorHex/#fields","title":"fields","text":""},{"location":"types/lualine.ColorHex/#colorhexbg","title":"ColorHex.bg","text":"<pre><code>ColorHex.bg : string\n</code></pre> <p>The table that Lualine expects when it sets colors.</p>"},{"location":"types/lualine.ColorHex/#colorhexfg","title":"ColorHex.fg","text":"<pre><code>ColorHex.fg : string\n</code></pre> <p>The background hex color. e.g. <code>\"#444444\"</code>.</p>"},{"location":"types/lualine.ColorHex/#colorhexgui","title":"ColorHex.gui","text":"<pre><code>ColorHex.gui : string\n</code></pre> <p>The text hex color. e.g. <code>\"#DD0000\"</code>.</p>"},{"location":"types/plugin_template.Configuration/","title":"class Configuration","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.Configuration/#fields","title":"fields","text":""},{"location":"types/plugin_template.Configuration/#configurationcommands","title":"Configuration.commands","text":"<pre><code>Configuration.commands : plugin_template.ConfigurationCommands?\n</code></pre> <p>The user's customizations for this plugin.</p>"},{"location":"types/plugin_template.Configuration/#configurationlogging","title":"Configuration.logging","text":"<pre><code>Configuration.logging : plugin_template.LoggingConfiguration?\n</code></pre> <p>Customize the fallback behavior of all <code>:PluginTemplate</code> commands.</p>"},{"location":"types/plugin_template.Configuration/#configurationtools","title":"Configuration.tools","text":"<pre><code>Configuration.tools : plugin_template.ConfigurationTools?\n</code></pre> <p>Control how and which logs print to file / Neovim.</p>"},{"location":"types/plugin_template.ConfigurationCommands/","title":"class ConfigurationCommands","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationCommands/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationCommands/#configurationcommandsgoodnight_moon","title":"ConfigurationCommands.goodnight_moon","text":"<pre><code>ConfigurationCommands.goodnight_moon : plugin_template.ConfigurationGoodnightMoon?\n</code></pre> <p>Customize the fallback behavior of all <code>:PluginTemplate</code> commands.</p>"},{"location":"types/plugin_template.ConfigurationCommands/#configurationcommandshello_world","title":"ConfigurationCommands.hello_world","text":"<pre><code>ConfigurationCommands.hello_world : plugin_template.ConfigurationHelloWorld?\n</code></pre> <p>The default values when a user calls <code>:PluginTemplate goodnight-moon</code>.</p>"},{"location":"types/plugin_template.ConfigurationGoodnightMoon/","title":"class ConfigurationGoodnightMoon","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationGoodnightMoon/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationGoodnightMoon/#configurationgoodnightmoonread","title":"ConfigurationGoodnightMoon.read","text":"<pre><code>ConfigurationGoodnightMoon.read : plugin_template.ConfigurationGoodnightMoonRead?\n</code></pre> <p>The default values when a user calls <code>:PluginTemplate goodnight-moon</code>.</p>"},{"location":"types/plugin_template.ConfigurationGoodnightMoonRead/","title":"class ConfigurationGoodnightMoonRead","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationGoodnightMoonRead/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationGoodnightMoonRead/#configurationgoodnightmoonreadphrase","title":"ConfigurationGoodnightMoonRead.phrase","text":"<pre><code>ConfigurationGoodnightMoonRead.phrase : string\n</code></pre> <p>The default values when a user calls <code>:PluginTemplate goodnight-moon read</code>.</p>"},{"location":"types/plugin_template.ConfigurationHelloWorld/","title":"class ConfigurationHelloWorld","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationHelloWorld/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationHelloWorld/#configurationhelloworldsay","title":"ConfigurationHelloWorld.say","text":"<pre><code>ConfigurationHelloWorld.say : plugin_template.ConfigurationHelloWorldSay?\n</code></pre> <p>The default values when a user calls <code>:PluginTemplate hello-world</code>.</p>"},{"location":"types/plugin_template.ConfigurationHelloWorldSay/","title":"class ConfigurationHelloWorldSay","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationHelloWorldSay/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationHelloWorldSay/#configurationhelloworldsayrepeat","title":"ConfigurationHelloWorldSay.repeat","text":"<pre><code>ConfigurationHelloWorldSay.repeat : number\n</code></pre> <p>The default values when a user calls <code>:PluginTemplate hello-world say</code>.</p>"},{"location":"types/plugin_template.ConfigurationHelloWorldSay/#configurationhelloworldsaystyle","title":"ConfigurationHelloWorldSay.style","text":"<pre><code>ConfigurationHelloWorldSay.style : (\"lowercase\"|\"uppercase\")\n</code></pre> <p>A 1-or-more value. When 1, the phrase is said once. When 2+, the phrase is repeated that many times.</p>"},{"location":"types/plugin_template.ConfigurationTools/","title":"class ConfigurationTools","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationTools/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationTools/#configurationtoolslualine","title":"ConfigurationTools.lualine","text":"<pre><code>ConfigurationTools.lualine : plugin_template.ConfigurationToolsLualine?\n</code></pre> <p>Optional third-party tool integrations.</p>"},{"location":"types/plugin_template.ConfigurationToolsLualine/","title":"alias ConfigurationToolsLualine","text":"<ul> <li>namespace: plugin_template</li> </ul> <pre><code>(alias) ConfigurationToolsLualine = table&lt;string,plugin_template.ConfigurationToolsLualineData&gt;\n</code></pre>"},{"location":"types/plugin_template.ConfigurationToolsLualineData/","title":"class ConfigurationToolsLualineData","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ConfigurationToolsLualineData/#fields","title":"fields","text":""},{"location":"types/plugin_template.ConfigurationToolsLualineData/#configurationtoolslualinedatacolor","title":"ConfigurationToolsLualineData.color","text":"<pre><code>ConfigurationToolsLualineData.color : vim.api.keyset.highlight?\n</code></pre>"},{"location":"types/plugin_template.ConfigurationToolsLualineData/#configurationtoolslualinedataprefix","title":"ConfigurationToolsLualineData.prefix","text":"<pre><code>ConfigurationToolsLualineData.prefix : string?\n</code></pre> <p>The foreground/background color to use for the Lualine status.</p>"},{"location":"types/plugin_template.LoggingConfiguration/","title":"class LoggingConfiguration","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.LoggingConfiguration/#fields","title":"fields","text":""},{"location":"types/plugin_template.LoggingConfiguration/#loggingconfigurationlevel","title":"LoggingConfiguration.level","text":"<pre><code>LoggingConfiguration.level : (\"trace\"|\"debug\"|\"info\"|\"warn\"|\"fatal\"|vim.log.levels.DEBUG|vim.log.levels.ERROR|vim.log.levels.INFO|vim.log.levels.TRACE|vim.log.levels.WARN)\n    | \"trace\"\n    | \"debug\"\n    | \"info\"\n    | \"warn\" -- | \"error\"\n    | \"fatal\"\n    | vim.log.levels.DEBUG\n    | vim.log.levels.ERROR\n    | vim.log.levels.INFO\n    | vim.log.levels.TRACE\n    | vim.log.levels.WARN -- )?\nAny messages above this level will be logged.\n\n</code></pre> <p>Control whether or not logging is printed to the console or to disk.</p>"},{"location":"types/plugin_template.LoggingConfiguration/#loggingconfigurationuse_console","title":"LoggingConfiguration.use_console","text":"<pre><code>LoggingConfiguration.use_console : boolean?\n</code></pre>"},{"location":"types/plugin_template.LoggingConfiguration/#loggingconfigurationuse_file","title":"LoggingConfiguration.use_file","text":"<pre><code>LoggingConfiguration.use_file : boolean?\n</code></pre> <p>Should print the output to neovim while running. Warning: This is very spammy. You probably don't want to enable this unless you have to.</p>"},{"location":"types/plugin_template.LoggingConfiguration/#loggingconfigurationoutput_path","title":"LoggingConfiguration.output_path","text":"<pre><code>LoggingConfiguration.output_path : string?\n</code></pre> <p>Should write to a file.</p>"},{"location":"types/plugin_template.LualineConfiguration/","title":"class LualineConfiguration","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.LualineConfiguration/#fields","title":"fields","text":""},{"location":"types/plugin_template.LualineConfiguration/#lualineconfigurationdisplay","title":"LualineConfiguration.display","text":"<pre><code>LualineConfiguration.display : table&lt;string,plugin_template.LualineDisplayData&gt;?\n</code></pre> <p>The Raw user settings from lualine's configuration. e.g. <code>require(\"lualine\").setup { sections = { { \"plugin_template\", ... }}}</code> where \"...\" is the user's settings.</p>"},{"location":"types/plugin_template.LualineDisplayData/","title":"class LualineDisplayData","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.LualineDisplayData/#fields","title":"fields","text":""},{"location":"types/plugin_template.LualineDisplayData/#lualinedisplaydataprefix","title":"LualineDisplayData.prefix","text":"<pre><code>LualineDisplayData.prefix : string\n</code></pre> <p>Any text, icons, etc that will be displayed for <code>plugin_template</code> commands.</p>"},{"location":"types/plugin_template.ReadFileResult/","title":"class ReadFileResult","text":"<ul> <li>namespace: plugin_template</li> </ul>"},{"location":"types/plugin_template.ReadFileResult/#fields","title":"fields","text":""},{"location":"types/plugin_template.ReadFileResult/#readfileresultdata","title":"ReadFileResult.data","text":"<pre><code>ReadFileResult.data : string\n</code></pre> <p>A file path + its contents.</p>"},{"location":"types/plugin_template.ReadFileResult/#readfileresultpath","title":"ReadFileResult.path","text":"<pre><code>ReadFileResult.path : string\n</code></pre> <p>The blob of text that was read from <code>path</code>.</p>"},{"location":"types/telescope.CommandOptions/","title":"alias CommandOptions","text":"<ul> <li>namespace: telescope</li> </ul> <pre><code>(alias) CommandOptions = table&lt;any,any&gt;\n</code></pre>"}]}